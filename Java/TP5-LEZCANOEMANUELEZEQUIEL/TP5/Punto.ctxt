#BlueJ class context
comment0.target=Punto
comment1.params=
comment1.target=Punto()
comment1.text=Constructor\:\ inicializador\ a\ 0*
comment10.params=
comment10.target=void\ mostrar()
comment10.text=Metodo\ mostrar\:\ acceso\ publico,\ no\ requiere\ argumentos,\ imprime\ una\ leyenda\ con\ las\ coordenadas\ del\ objeto\ de\ tipo\ Punto,\ devuelve\ void,
comment2.params=p_x\ p_y
comment2.target=Punto(double,\ double)
comment2.text=Constructor\:\ nesesita\ dos\ argumentos\ de\ tipo\ double\ para\ crear\ un\ objeto\ de\ tipo\ Punto*
comment3.params=p_x
comment3.target=void\ setX(double)
comment3.text=Metodo\ Setter\ para\ atributo\ "x",\ acceso\ privado,\ requiere\ un\ valor\ de\ tipo\ double,\ devuelve\ void*
comment4.params=p_y
comment4.target=void\ setY(double)
comment4.text=Metodo\ Setter\ para\ atributo\ "y",\ acceso\ privado,\ requiere\ un\ valor\ de\ tipo\ double,\ devuelve\ void*
comment5.params=
comment5.target=double\ getX()
comment5.text=Metodo\ Getter\ para\ atributo\ "x",\ acceso\ publico,\ devuelve\ dato\ de\ tipo\ double
comment6.params=
comment6.target=double\ getY()
comment6.text=Metodo\ Getter\ para\ atributo\ "y",\ acceso\ publico,\ devuelve\ dato\ de\ tipo\ double
comment7.params=p_puntoDistante
comment7.target=double\ distancia(Punto)
comment7.text=Metodo\ distancia\:\ acceso\ publico,\ devuelve\ un\ dato\ de\ tipo\ double\ que\ correspondea\ la\ distancia\ entre\ en\ punto\ y\ otro,\ nesesita\ un\ objeto\ de\ tipo\ punto\ como\ argumento
comment8.params=p_dx\ p_dy
comment8.target=void\ desplazar(double,\ double)
comment8.text=Metodo\ desplazar\:\ acceso\ publico,\ devuelve\ void,\ desplaza\ el\ punto\ hacia\ las\ nuevas\ coordenadas\ que\ se\ le\ indican\ como\ argumentos,\ que\ son\ de\ tipo\ double
comment9.params=
comment9.target=java.lang.String\ coordenadas()
comment9.text=Metodo\ coordenadas\:\ acceso\ publico,\ no\ requiere\ argumentos,\ devuelve\ un\ dato\ de\ tipo\ String\ que\ corresponde\ a\ las\ coordenadas\ del\ objeto\ Punto
numComments=11
